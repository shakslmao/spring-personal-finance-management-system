services:
    timescaledb:
        container_name: timescaledb-ms
        image: timescale/timescaledb:latest-pg15
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            PGDATA: /var/lib/postgresql/data/pgdata
        volumes:
            - timescaledb:/var/lib/postgresql/data
        ports:
            - 5432:5432
        networks:
            - personal-finance-microservice
        restart: unless-stopped

    pgadmin:
        container_name: pgadmin-ms
        image: dpage/pgadmin4
        environment:
            PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL}
            PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD}
            PGADMIN_CONFIG_SERVER_MODE: "False"
        volumes:
            - pgadmin:/var/lib/pgadmin
        ports:
            - 5050:80
        networks:
            - personal-finance-microservice
        restart: unless-stopped

    mongodb:
        container_name: mongodb-ms
        image: mongo
        ports:
            - 27017:27017
        volumes:
            - mongo:/data/db
        environment:
            MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
            MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        networks:
            - personal-finance-microservice

    mongo-express:
        container_name: mongoexpress-ms
        image: mongo-express
        restart: always
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: root
            ME_CONFIG_MONGODB_ADMINPASSWORD: root
            ME_CONFIG_MONGODB_SERVER: mongodb
        networks:
            - personal-finance-microservice

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: zookeeper-ms
        environment:
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - 22181:2181
        networks:
            - personal-finance-microservice

    kafka:
        image: confluentinc/cp-kafka:latest
        container_name: kafka-ms
        ports:
            - 9092:9092
        depends_on:
            - zookeeper
        environment:
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
        networks:
            - personal-finance-microservice

    rabbitmq:
        container_name: rabbitmq-ms
        image: rabbitmq:management
        ports:
            - 5672:5672
            - 15672:15672
        environment:
            RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
            RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
        volumes:
            - rabbitmq_data:/var/lib/rabbitmq
        networks:
            - personal-finance-microservice
        restart: unless-stopped

    mail-dev:
        container_name: maildev-ms
        image: maildev/maildev
        ports:
            - 1080:1080
            - 1025:1025

    zipkin:
        container_name: zipkin-ms
        image: openzipkin/zipkin
        ports:
            - 9411:9411
        networks:
            - personal-finance-microservice

    keycloak:
        container_name: keycloak-ms
        image: quay.io/keycloak/keycloak:24.0.2
        ports:
            - 9098:8080
        environment:
            KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
            KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
        networks:
            - personal-finance-microservice
        command:
            - "start-dev"

    redis:
        container_name: redis-ms
        image: redis:latest
        ports:
            - 6379:6379
        networks:
            - personal-finance-microservice
        volumes:
            - redis:/data
        restart: unless-stopped

    #prometheus:
        #container_name: prometheus-ms
        #image: prom/prometheus:latest
        #ports:
        #    - 9090:9090
        #volumes:
        #    - prometheus_data:/prometheus
         #   - ./prometheus.yml:/etc/prometheus/prometheus.yml
        #networks:
       #     - personal-finance-microservice
       # restart: unless-stopped

    grafana:
        container_name: grafana-ms
        image: grafana/grafana:latest
        ports:
            - 3000:3000
        volumes:
            - grafana_data:/var/lib/grafana
        environment:
            - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
            - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
        networks:
            - personal-finance-microservice
        restart: unless-stopped

    elasticsearch:
        container_name: elasticsearch-ms
        image: docker.elastic.co/elasticsearch/elasticsearch:8.3.2
        environment:
            - discovery.type=single-node
            - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}  # Secure password for the admin
        ports:
            - 9200:9200
        volumes:
            - elasticsearch_data:/usr/share/elasticsearch/data
        networks:
            - personal-finance-microservice
        restart: unless-stopped

    # Microservices
    configuration-service:
        build:
            context: ./services/configuration-service
        image: configuration-service
        environment:
            - SPRING_CLOUD_CONFIG_URI=http://configuration-service:8888
        ports:
            -   8888:8888
        networks:
            - personal-finance-microservice
        healthcheck:
            test: ["CMD", "curl", "-f", "http://configuration-service:8888/actuator/health"]
            interval: 10s
            timeout: 10s
            retries: 5
            start_period: 20s

networks:
    personal-finance-microservice:
      driver: bridge

volumes:
    timescaledb:
    pgadmin:
    mongo:
    zipkin:
    rabbitmq_data:
    keycloak:
    redis:
    prometheus_data:
    grafana_data:
    elasticsearch_data: