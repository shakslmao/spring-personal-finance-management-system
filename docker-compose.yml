services:
    timescaledb:
        container_name: timescaledb-ms
        image: timescale/timescaledb:latest-pg15
        environment:
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
            PGDATA: /var/lib/postgresql/data/pgdata
        volumes:
            - timescaledb:/var/lib/postgresql/data
        ports:
            - 5432:5432
        networks:
            - personal-finance-microservices
        restart: unless-stopped
        healthcheck:
            test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -h localhost"]
            interval: 10s
            timeout: 5s
            retries: 3

    mongodb:
        container_name: mongodb
        image: mongo:latest
        ports:
            - 27017:27017
        volumes:
            - mongo_data_container:/data/db
        #environment:
        #MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
        #MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
        networks:
            - personal-finance-microservices

    mongo-express:
        container_name: mongoexpress
        image: mongo-express
        restart: always
        ports:
            - 8081:8081
        environment:
            ME_CONFIG_MONGODB_ADMINUSERNAME: ${ME_CONFIG_MONGODB_ADMINUSERNAME}
            ME_CONFIG_MONGODB_ADMINPASSWORD: ${ME_CONFIG_MONGODB_ADMINPASSWORD}
            ME_CONFIG_MONGODB_SERVER: mongodb
        networks:
            - personal-finance-microservices

    zookeeper:
        image: confluentinc/cp-zookeeper:latest
        container_name: zookeeper-ms
        environment:
            ZOOKEEPER_SERVER_ID: 1
            ZOOKEEPER_CLIENT_PORT: 2181
            ZOOKEEPER_TICK_TIME: 2000
        ports:
            - 22181:2181
        networks:
            - personal-finance-microservices

    kafka:
        image: confluentinc/cp-kafka:latest
        container_name: kafka-ms
        ports:
            - 9092:9092
        depends_on:
            - zookeeper
        environment:
            KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
            KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
            KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
            KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
            KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:9092
            KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,PLAINTEXT_HOST://0.0.0.0:9092
        networks:
            - personal-finance-microservices

    keycloak:
        container_name: keycloak-ms
        image: quay.io/keycloak/keycloak:24.0.2
        ports:
            - 9098:8080
        environment:
            KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN}
            KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
        networks:
            - personal-finance-microservices
        command:
            - "start-dev"

    prometheus:
        container_name: prometheus
        image: prom/prometheus:latest
        volumes:
            - ./prometheus.yml:/etc/prometheus/prometheus.yml
        ports:
            - 9090:9090
        networks:
            - personal-finance-microservices

    grafana:
        container_name: grafana
        image: grafana/grafana:latest
        volumes:
            - grafana-data:/var/lib/grafana
        ports:
            - 3000:3000
        networks:
            - personal-finance-microservices
        environment:
            - GF_SECURITY_ADMIN_USER=${GF_SECURITY_ADMIN_USER}
            - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}

    redis:
        image: redis:latest
        container_name: redis
        ports:
            - 6379:6379
        networks:
            - personal-finance-microservices
        command: ["redis-server", "--appendonly", "yes"]

networks:
    personal-finance-microservices:
        driver: bridge

volumes:
    timescaledb:
    pgadmin:
    mongo_data_container:
    keycloak:
    grafana-data:

        # Microservices
        #configuration-service:
        #   build:
        #      context: ./services/configuration-service
        # image: configuration-service
        #ports:
        #   - 8888:8888
        #networks:
        #   - personal-finance-microservice
        #healthcheck:
        #   test: ["CMD", "curl", "-f", "http://configuration-service:8888/actuator/health"]
        #   interval: 10s
        #  timeout: 5s
        # retries: 5

    #    discovery-service:
    #       build:
    #          context: ./services/discovery-service
    #     image: discovery-service
    #    ports:
    #       - 8761:8761
    #  hostname: discovery-service
    # environment:
    #   - SPRING_CLOUD_CONFIG_URI=http://configuration-service:8888
    #    - SPRING_PROFILES_ACTIVE=docker
    #  - EUREKA_INSTANCE_HOSTNAME=discovery-service
    # - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    # networks:
    # - personal-finance-microservice
    # depends_on:
    # configuration-service:
    # condition: service_healthy
    # healthcheck:
    # test: ["CMD", "curl", "-f", "http://discovery-service:8761/actuator/health"]
    # interval: 10s
    # timeout: 5s
    # retries: 5

    # apigateway-service:
    # build:
    # context: ./services/apigateway-service
    # image: apigateway-service
    # ports:
    # - 8222:8222
    # environment:
    # - SPRING_PROFILES_ACTIVE=docker
    # - SPRING_CLOUD_CONFIG_URI=http://configuration-service:8888
    # - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    # networks:
    # - personal-finance-microservice
    # depends_on:
    # discovery-service:
    # condition: service_healthy
    # configuration-service:
    # condition: service_healthy
    # user-service:
    # healthcheck:
    # test: ["CMD", "curl", "-f", "http://apigateway-service:8222/actuator/health"]
    # interval: 10s
    # timeout: 5s
    # retries: 5

    # user-service:
    # build:
    # context: ./services/user-service
    # image: user-service
    # hostname: user-service
    # ports:
    # - 8090:8090
    # environment:
    # - SPRING_PROFILES_ACTIVE=docker
    # - SPRING_CLOUD_CONFIG_URI=http://configuration-service:8888
    # - EUREKA_CLIENT_SERVICEURL_DEFAULTZONE=http://discovery-service:8761/eureka/
    # - SPRING_DATASOURCE_URL=jdbc:postgresql://timescaledb:5432/userdb
    # - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
    # - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
    # networks:
    # - personal-finance-microservice
    # depends_on:
    # discovery-service:
    # condition: service_healthy
    # configuration-service:
    # condition: service_healthy
    # timescaledb:
    # condition: service_healthy
    # healthcheck:
    # test: ["CMD", "curl", "-f", "http://user-service:8090/actuator/health"]
    # interval: 10s
    # timeout: 5s
    # retries: 5
